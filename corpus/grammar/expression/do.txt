==================
Simple bind
==================

f = do
    x ← m
    m'
---

(source_file
    (function_clause
        (lhs
            (atom (qualified_name)))
        (rhs
            (expr
                (do
                    (do_stmt (atom (qualified_name)) (atom (qualified_name)) (atom (qualified_name)))
                    (do_stmt (atom (qualified_name))))))))

==================
Pattern bind
==================

f = do
    p ← m
        where pᵢ → mᵢ
    m'
---

(source_file
    (function_clause
        (lhs
            (atom (qualified_name)))
        (rhs
            (expr
                (do
                    (do_stmt
                        (atom (qualified_name))
                        (atom (qualified_name))
                        (atom (qualified_name)))
                        (do_where
                            (lambda_clause
                                (atom (qualified_name))
                                (expr (atom (qualified_name)))))
                    (do_stmt (atom (qualified_name))))))))

==================
Non-binding statement
==================
f = do m
       m'
---

(source_file
    (function_clause
        (lhs
            (atom (qualified_name)))
        (rhs
            (expr
                (do
                    (do_stmt (atom (qualified_name)))
                    (do_stmt (atom (qualified_name))))))))

==================
Let binding (Single line)
==================
f = do
    let m = m
    m'
---

(source_file
    (function_clause
        (lhs
            (atom (qualified_name)))
        (rhs
            (expr
                (do
                    (do_let
                        (function_clause
                            (lhs (atom (qualified_name)))
                            (rhs (expr (atom (qualified_name))))))
                    (do_stmt (atom (qualified_name))))))))

==================
Let binding (Multiline)
==================
f = do
    let m = m
        b = c
    m'
---

(source_file
    (function_clause
        (lhs
            (atom (qualified_name)))
        (rhs
            (expr
                (do
                    (do_let
                        (function_clause
                            (lhs (atom (qualified_name)))
                            (rhs (expr (atom (qualified_name)))))
                        (function_clause
                            (lhs (atom (qualified_name)))
                            (rhs (expr (atom (qualified_name))))))
                    (do_stmt (atom (qualified_name))))))))

==================
Let binding (mixed)
==================
f = do
    let m = m
    let a = b in c
    m'
---

(source_file
    (function_clause
        (lhs
            (atom (qualified_name)))
        (rhs
            (expr
                (do
                    (do_let
                        (function_clause
                            (lhs (atom (qualified_name)))
                            (rhs (expr (atom (qualified_name))))))
                    (do_stmt (atom (qualified_name))))))))
                    (do_stmt (atom (qualified_name))))))))
