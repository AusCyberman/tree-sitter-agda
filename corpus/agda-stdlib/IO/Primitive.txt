==================
IO monad
==================

open import Agda.Builtin.IO public using (IO)

infixl 1 _>>=_

postulate
  return : ∀ {a} {A : Set a} → A → IO A
  _>>=_  : ∀ {a b} {A : Set a} {B : Set b} → IO A → (A → IO B) → IO B

{-# COMPILE GHC return = \_ _ -> return    #-}
{-# COMPILE GHC _>>=_  = \_ _ _ _ -> (>>=) #-}
{-# COMPILE UHC return = \_ _ x -> UHC.Agda.Builtins.primReturn x #-}
{-# COMPILE UHC _>>=_  = \_ _ _ _ x y -> UHC.Agda.Builtins.primBind x y #-}


---

(source_file
    (open (qualified_name)
        (import_directive)
        (import_directive (name)))
    (infix (integer) (name))
    (postulate
        (function_clause
            (lhs (function_name (qualified_name)))
            (rhs (expr
                (forall_bindings
                    (untyped_binding (atom (qualified_name)))
                    (typed_binding
                        (atom (qualified_name))
                        (expr (atom) (atom (qualified_name)))))
                (expr
                    (atom (qualified_name))
                    (expr
                        (atom (qualified_name))
                        (atom (qualified_name)))))))
        (function_clause
            (lhs (function_name (qualified_name)))
            (rhs (expr
                (forall_bindings
                    (untyped_binding
                        (atom (qualified_name))
                        (atom (qualified_name)))
                    (typed_binding
                        (atom (qualified_name))
                        (expr (atom) (atom (qualified_name))))
                    (typed_binding
                        (atom (qualified_name))
                        (expr (atom) (atom (qualified_name)))))
                (expr (atom (qualified_name))
                    (atom (qualified_name))
                    (expr
                        (atom (expr
                            (atom (qualified_name))
                            (expr
                                (atom (qualified_name))
                                (atom (qualified_name)))))
                        (expr
                            (atom (qualified_name))
                            (atom (qualified_name)))))))))
    (pragma)
    (pragma)
    (pragma)
    (pragma))
